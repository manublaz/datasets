-- Consultas SQL para el dataset
-- dataset-datosbne-50k_2024-07-19.sql
-- ====================================================================


-- Registros totales y rangos de fecha
-- ====================================================================
SELECT COUNT(*) AS total_registros, MIN(datereg) AS fecha_inicio, MAX(datereg) AS fecha_fin, TIMEDIFF(MAX(datereg), MIN(datereg)) AS duracion_total FROM datosbne;

-- Detección de saltos en la numeración del catálogo datosBNE
-- ====================================================================
WITH numeros_extraidos AS ( SELECT id, url, CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(url, 'bimo', -1), '.', 1) AS UNSIGNED) AS numero_registro FROM datosbne ), diferencias_consecutivas AS ( SELECT id, url, numero_registro, numero_registro - LAG(numero_registro) OVER (ORDER BY numero_registro) AS diferencia FROM numeros_extraidos ) SELECT id, url, numero_registro, diferencia, CASE WHEN diferencia = 1 THEN 'Consecutivo' WHEN diferencia IS NULL THEN 'Primer registro' ELSE 'Salto detectado' END AS tipo_secuencia, COUNT(*) OVER (PARTITION BY CASE WHEN diferencia > 1 THEN 1 ELSE 0 END) AS total_saltos, AVG(CASE WHEN diferencia > 1 THEN diferencia ELSE NULL END) OVER () AS promedio_salto, MAX(diferencia) OVER () AS maximo_salto FROM diferencias_consecutivas WHERE diferencia > 1 OR diferencia IS NULL ORDER BY numero_registro;

-- Tiempo de espera entre inserciones, superior a 10 segundos
-- ====================================================================
WITH numeros_extraidos AS ( SELECT id, url, CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(url, 'bimo', -1), '.', 1) AS UNSIGNED) AS numero_registro FROM datosbne ), diferencias_consecutivas AS ( SELECT id, url, numero_registro, numero_registro - LAG(numero_registro) OVER (ORDER BY numero_registro) AS diferencia FROM numeros_extraidos ) SELECT COUNT(*) AS total_registros, COUNT(CASE WHEN diferencia > 1 THEN 1 END) AS total_saltos, AVG(CASE WHEN diferencia > 1 THEN diferencia END) AS promedio_salto, MAX(diferencia) AS maximo_salto, MIN(CASE WHEN diferencia > 1 THEN diferencia END) AS minimo_salto, STDDEV(CASE WHEN diferencia > 1 THEN diferencia END) AS desviacion_estandar_saltos FROM diferencias_consecutivas;

-- Resumen de la detección de saltos
-- ====================================================================
WITH registros_ordenados AS ( SELECT id, datereg, LAG(datereg) OVER (ORDER BY datereg) AS datereg_anterior FROM datosbne ), interrupciones AS ( SELECT id, datereg, datereg_anterior, TIMESTAMPDIFF(SECOND, datereg_anterior, datereg) AS diferencia_segundos FROM registros_ordenados WHERE TIMESTAMPDIFF(SECOND, datereg_anterior, datereg) > 10 ) SELECT id AS id_registro_despues_interrupcion, datereg AS fecha_registro_despues_interrupcion, datereg_anterior AS fecha_registro_antes_interrupcion, diferencia_segundos, CONCAT( FLOOR(diferencia_segundos / 3600), ' horas, ', FLOOR((diferencia_segundos % 3600) / 60), ' minutos, ', diferencia_segundos % 60, ' segundos' ) AS duracion_interrupcion FROM interrupciones ORDER BY diferencia_segundos DESC;

-- Máximo y mínimo de registros insertados por minuto
-- ====================================================================
SELECT MAX(registros) AS max_registros_por_minuto, MIN(registros) AS min_registros_por_minuto, AVG(registros) AS promedio_registros_por_minuto FROM ( SELECT COUNT(*) AS registros FROM datosbne GROUP BY DATE(datereg), HOUR(datereg), MINUTE(datereg) ) AS registros_por_minuto;

-- Máximo y mínimo de registros insertados por hora
-- ====================================================================
SELECT MAX(registros) AS max_registros_por_hora, MIN(registros) AS min_registros_por_hora, AVG(registros) AS promedio_registros_por_hora FROM ( SELECT COUNT(*) AS registros FROM datosbne GROUP BY DATE(datereg), HOUR(datereg) ) AS registros_por_hora;

-- Compleción de datos
-- ====================================================================
SELECT COUNT(*) AS total_registros, SUM(CASE WHEN author != 'No especificado' THEN 1 ELSE 0 END) AS author_completo, SUM(CASE WHEN author != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_author, MAX(LENGTH(author)) AS max_length_author, MIN(CASE WHEN author != 'No especificado' THEN LENGTH(author) ELSE NULL END) AS min_length_author, SUM(CASE WHEN title != 'No especificado' THEN 1 ELSE 0 END) AS title_completo, SUM(CASE WHEN title != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_title, MAX(LENGTH(title)) AS max_length_title, MIN(CASE WHEN title != 'No especificado' THEN LENGTH(title) ELSE NULL END) AS min_length_title, SUM(CASE WHEN placeOfPublication != 'No especificado' THEN 1 ELSE 0 END) AS placeOfPublication_completo, SUM(CASE WHEN placeOfPublication != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_placeOfPublication, MAX(LENGTH(placeOfPublication)) AS max_length_placeOfPublication, MIN(CASE WHEN placeOfPublication != 'No especificado' THEN LENGTH(placeOfPublication) ELSE NULL END) AS min_length_placeOfPublication, SUM(CASE WHEN publisher != 'No especificado' THEN 1 ELSE 0 END) AS publisher_completo, SUM(CASE WHEN publisher != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_publisher, MAX(LENGTH(publisher)) AS max_length_publisher, MIN(CASE WHEN publisher != 'No especificado' THEN LENGTH(publisher) ELSE NULL END) AS min_length_publisher, SUM(CASE WHEN publicationDate != 'No especificado' THEN 1 ELSE 0 END) AS publicationDate_completo, SUM(CASE WHEN publicationDate != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_publicationDate, MAX(LENGTH(publicationDate)) AS max_length_publicationDate, MIN(CASE WHEN publicationDate != 'No especificado' THEN LENGTH(publicationDate) ELSE NULL END) AS min_length_publicationDate, SUM(CASE WHEN physicalDescription != 'No especificado' THEN 1 ELSE 0 END) AS physicalDescription_completo, SUM(CASE WHEN physicalDescription != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_physicalDescription, MAX(LENGTH(physicalDescription)) AS max_length_physicalDescription, MIN(CASE WHEN physicalDescription != 'No especificado' THEN LENGTH(physicalDescription) ELSE NULL END) AS min_length_physicalDescription, SUM(CASE WHEN otherPhysicalCharacteristics != 'No especificado' THEN 1 ELSE 0 END) AS otherPhysicalCharacteristics_completo, SUM(CASE WHEN otherPhysicalCharacteristics != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_otherPhysicalCharacteristics, MAX(LENGTH(otherPhysicalCharacteristics)) AS max_length_otherPhysicalCharacteristics, MIN(CASE WHEN otherPhysicalCharacteristics != 'No especificado' THEN LENGTH(otherPhysicalCharacteristics) ELSE NULL END) AS min_length_otherPhysicalCharacteristics, SUM(CASE WHEN dimensions != 'No especificado' THEN 1 ELSE 0 END) AS dimensions_completo, SUM(CASE WHEN dimensions != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_dimensions, MAX(LENGTH(dimensions)) AS max_length_dimensions, MIN(CASE WHEN dimensions != 'No especificado' THEN LENGTH(dimensions) ELSE NULL END) AS min_length_dimensions, SUM(CASE WHEN materialType != 'No especificado' THEN 1 ELSE 0 END) AS materialType_completo, SUM(CASE WHEN materialType != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_materialType, MAX(LENGTH(materialType)) AS max_length_materialType, MIN(CASE WHEN materialType != 'No especificado' THEN LENGTH(materialType) ELSE NULL END) AS min_length_materialType, SUM(CASE WHEN signature != 'No especificado' THEN 1 ELSE 0 END) AS signature_completo, SUM(CASE WHEN signature != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_signature, MAX(LENGTH(signature)) AS max_length_signature, MIN(CASE WHEN signature != 'No especificado' THEN LENGTH(signature) ELSE NULL END) AS min_length_signature, SUM(CASE WHEN location != 'No especificado' THEN 1 ELSE 0 END) AS location_completo, SUM(CASE WHEN location != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_location, MAX(LENGTH(location)) AS max_length_location, MIN(CASE WHEN location != 'No especificado' THEN LENGTH(location) ELSE NULL END) AS min_length_location, SUM(CASE WHEN headquarters != 'No especificado' THEN 1 ELSE 0 END) AS headquarters_completo, SUM(CASE WHEN headquarters != 'No especificado' THEN 1 ELSE 0 END) / COUNT(*) * 100 AS porcentaje_headquarters, MAX(LENGTH(headquarters)) AS max_length_headquarters, MIN(CASE WHEN headquarters != 'No especificado' THEN LENGTH(headquarters) ELSE NULL END) AS min_length_headquarters, ( SUM(CASE WHEN author != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN title != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN placeOfPublication != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN publisher != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN publicationDate != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN physicalDescription != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN otherPhysicalCharacteristics != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN dimensions != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN materialType != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN signature != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN location != 'No especificado' THEN 1 ELSE 0 END) + SUM(CASE WHEN headquarters != 'No especificado' THEN 1 ELSE 0 END) ) / (COUNT(*) * 12) * 100 AS porcentaje_medio_complecion, AVG( (CASE WHEN author != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN title != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN placeOfPublication != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN publisher != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN publicationDate != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN physicalDescription != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN otherPhysicalCharacteristics != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN dimensions != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN materialType != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN signature != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN location != 'No especificado' THEN 1 ELSE 0 END + CASE WHEN headquarters != 'No especificado' THEN 1 ELSE 0 END) / 12.0 ) * 100 AS porcentaje_medio_complecion_por_registro FROM datosbne;
